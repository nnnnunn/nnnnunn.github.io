{"title":"快速排序入门（C语言学习笔记）","uid":"2279e94af3046c332d621ae7956bf9e6","slug":"快速排序入门（C语言入门）","date":"2023-11-28T01:52:28.000Z","updated":"2023-11-28T03:57:37.766Z","comments":true,"path":"api/articles/快速排序入门（C语言入门）.json","keywords":null,"cover":null,"content":"<h1 id=\"快速排序思想介绍\"><a href=\"#快速排序思想介绍\" class=\"headerlink\" title=\"快速排序思想介绍\"></a>快速排序思想介绍</h1><p>本来打算让文心一言写一下这一块内容的，但改了几次 prompt 都写不好，还是算了。</p>\n<p>排序算法有很多种，比如冒泡排序、选择排序、桶排序、归并排序等等，但这些排序没有一个敢在名字里宣称自己“快速”。那么我们可想而知，快速排序自然有他的奇特之处。在这里，我们先不研究凭啥快速排序能拿下“快速”的名号，我们来仔细看看他奇妙的思想。</p>\n<p>快速排序以分治思想为基础，分治是计算机解决问题（当然人也是）的一个重要手段。所以在介绍快速排序之前，我们要先简单了解一下分治思想。</p>\n<h2 id=\"分治思想\"><a href=\"#分治思想\" class=\"headerlink\" title=\"分治思想\"></a>分治思想</h2><p>分治，也即“分而治之”。顾名思义，就是把一个问题拆解成几个小问题去解决。当一个任务过于复杂的时候，我们可以尝试对他进行拆解。拆解一遍不够，就再拆一遍，直到拆解出来的问题能够轻而易举地解决。举个例子，对一个数列进行排序，看起来确实很复杂，但我们可以把这个数列拆解成两个数列，将他们分别排序，再进行合并；拆解出来的两个数列再进行拆解，这个操作一直进行下去，最后就变成了两个数之间的比较，这就是分治思想在发挥作用（上面提到的这个想法其实是归并排序的思路）。</p>\n<p>需要注意的是，分治过程中，问题的形式一般不会发生变化，我们往往是在减小问题的规模（像上面这个例子，同样是对数列进行排序，但是数列的长度在不断减小，直到变成了两个数的比较，这个时候所谓的排序就变成了单纯的比较，这就是量变引起质变）。</p>\n<h2 id=\"快速排序思想\"><a href=\"#快速排序思想\" class=\"headerlink\" title=\"快速排序思想\"></a>快速排序思想</h2><p>排序的目的是让整个数列变得有序，“有序”，也就是单调递增或者单调递减。这是很严格的结果，因为对于任意位置都需要满足“前一个数小于等于他”和“后一个数大于等于他”（以单调递增为例）。</p>\n<p>我们不妨尝试着把目光集中在整个数列中的一个数上。对于一个单调递增有序数列中的某个数来说，他左边的数都小于他，他右边的数都大于他。</p>\n<h1 id=\"快速排序参考代码\"><a href=\"#快速排序参考代码\" class=\"headerlink\" title=\"快速排序参考代码\"></a>快速排序参考代码</h1><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">#include</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C3E88D\">stdio.h</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 交换两个元素的位置  </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int*</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int*</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">b</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> temp </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">a</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">a </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">b</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">*</span><span style=\"color: #BABED8\">b </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> temp</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 找到基准元素的正确位置  </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">partition</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">arr</span><span style=\"color: #89DDFF\">[],</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">low</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">high</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> pivot </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">high</span><span style=\"color: #89DDFF\">];</span><span style=\"color: #676E95; font-style: italic\">  // 选择数组的最后一个元素作为基准  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">low </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 定义指向低位的指针i，初值为low-1  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> low</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> j </span><span style=\"color: #89DDFF\">&lt;=</span><span style=\"color: #BABED8\"> high </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> j</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #676E95; font-style: italic\">  // 遍历数组，从低位到高位  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F07178\">j</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\"> pivot</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #676E95; font-style: italic\">  // 如果当前元素小于基准  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">            i</span><span style=\"color: #89DDFF\">++;</span><span style=\"color: #676E95; font-style: italic\">  // 将i指针后移一位  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">            </span><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F07178\">i</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F07178\">j</span><span style=\"color: #89DDFF\">]);</span><span style=\"color: #676E95; font-style: italic\">  // 将arr[j]和arr[i]交换位置，保证比基准小的元素都在基准的左侧  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #F07178\">  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">swap</span><span style=\"color: #89DDFF\">(&amp;</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">],</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #BABED8\">high</span><span style=\"color: #89DDFF\">]);</span><span style=\"color: #676E95; font-style: italic\">  // 最后将基准元素放到正确的位置上  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">i </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 返回基准的索引位置  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 递归实现快速排序  </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">void</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">quickSort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">arr</span><span style=\"color: #89DDFF\">[],</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">low</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">high</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">low </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> high</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #676E95; font-style: italic\">  // 如果低位不等于高位，说明还有待排序的元素  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #C792EA\">int</span><span style=\"color: #F07178\"> pi </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">partition</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F07178\">arr</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> low</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> high</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 对数组进行分割，并得到基准的索引位置pi  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #82AAFF\">quickSort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F07178\">arr</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> low</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> pi </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 对基准左边的部分进行递归排序  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #82AAFF\">quickSort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F07178\">arr</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> pi </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> high</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 对基准右边的部分进行递归排序  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">main</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> arr[] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">7</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">9</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">5</span><span style=\"color: #89DDFF\">&#125;;</span><span style=\"color: #676E95; font-style: italic\">  // 定义待排序的数组  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> n </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">sizeof(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">sizeof(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">]);</span><span style=\"color: #676E95; font-style: italic\">  // 计算数组的元素个数n  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">quickSort</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> n </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 对数组进行快速排序  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">printf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Sorted array: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 打印排序结果的前缀  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i</span><span style=\"color: #89DDFF\">++)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #676E95; font-style: italic\">  // 遍历数组，逐个打印元素  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #82AAFF\">printf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">%d </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">arr</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #F07178\">i</span><span style=\"color: #89DDFF\">]);</span><span style=\"color: #676E95; font-style: italic\">  // 打印当前元素和一个空格  </span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">printf</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">\\n</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span><span style=\"color: #676E95; font-style: italic\">  // 打印换行符，结束输出  </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #676E95; font-style: italic\">  // 主函数返回0，表示程序正常结束  </span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div>","text":"快速排序思想介绍本来打算让文心一言写一下这一块内容的，但改了几次 prompt 都写不好，还是算了。 排序算法有很多种，比如冒泡排序、选择排序、桶排序、归并排序...","permalink":"/post/快速排序入门（C语言入门）","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"计算机科学与技术-C语言","slug":"计算机科学与技术-C语言","count":1,"path":"api/categories/计算机科学与技术-C语言.json"}],"tags":[{"name":"快速排序","slug":"快速排序","count":1,"path":"api/tags/快速排序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%80%9D%E6%83%B3%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">快速排序思想介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">分治思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">快速排序思想</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">快速排序参考代码</span></a></li></ol>","author":{"name":"氮氮NNU","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"无思想 不思政","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"建站日志","uid":"da2d4c79bbf0ce3c865b47a4d64793f5","slug":"建站日志","date":"2023-10-11T14:59:05.000Z","updated":"2023-11-28T01:51:29.591Z","comments":true,"path":"api/articles/建站日志.json","keywords":null,"cover":null,"text":"您好，欢迎来到 NN 的知识分享站！我是 氮氮NNU。 本网站基于 hexo 模型、Aurora 主题建立，在此感谢背后的开发者为我提供了优质的平台、节省了我在...","permalink":"/post/建站日志","photos":[],"count_time":{"symbolsCount":215,"symbolsTime":"1 mins."},"categories":[{"name":"网站建设","slug":"网站建设","count":1,"path":"api/categories/网站建设.json"}],"tags":[{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}],"author":{"name":"氮氮NNU","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"无思想 不思政","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}